{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar initState = {\n  cities: [],\n  hasErrored: false,\n  isLoading: false //we create a root reducer, in a big application we would have more than one reduce\n  // we always pass state and action as parameters.\n  // we pass a default parameter of init state\n\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var newState = _objectSpread({}, state);\n\n  if (action.type === 'ITEMS_HAS_ERRORED') {\n    newState.hasErrored = action.hasErrored;\n  }\n\n  if (action.type === 'ITEMS_IS_LOADING') {\n    newState.isLoading = action.isLoading;\n  }\n\n  if (action.type === 'ITEMS_FETCH_DATA_SUCCESS') {\n    newState.cities = action.cities;\n  }\n\n  return newState;\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:\\Users\\lesca\\Desktop\\mytinerary\\client\\src\\store\\reducers\\rootReducer.js"],"names":["initState","cities","hasErrored","isLoading","rootReducer","state","action","newState","type"],"mappings":";AAAA,IAAMA,SAAS,GAAG;AACdC,EAAAA,MAAM,EAAE,EADM;AAEdC,EAAAA,UAAU,EAAE,KAFE;AAGdC,EAAAA,SAAS,EAAG,KAHE,CAMlB;AACA;AACA;;AARkB,CAAlB;;AASA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAA8B;AAAA,MAA7BC,KAA6B,uEAArBL,SAAqB;AAAA,MAAXM,MAAW;;AAC9C,MAAMC,QAAQ,qBAAOF,KAAP,CAAd;;AACA,MAAKC,MAAM,CAACE,IAAP,KAAgB,mBAArB,EAA0C;AAClCD,IAAAA,QAAQ,CAACL,UAAT,GAAsBI,MAAM,CAACJ,UAA7B;AACP;;AACD,MAAKI,MAAM,CAACE,IAAP,KAAgB,kBAArB,EAAyC;AACjCD,IAAAA,QAAQ,CAACJ,SAAT,GAAqBG,MAAM,CAACH,SAA5B;AAEP;;AACD,MAAKG,MAAM,CAACE,IAAP,KAAgB,0BAArB,EAAgD;AACxCD,IAAAA,QAAQ,CAACN,MAAT,GAAkBK,MAAM,CAACL,MAAzB;AACH;;AACD,SAAOM,QAAP;AACH,CAbL;;AAmBA,eAAeH,WAAf","sourcesContent":["const initState = {\r\n    cities: [],\r\n    hasErrored: false,\r\n    isLoading : false\r\n}\r\n\r\n//we create a root reducer, in a big application we would have more than one reduce\r\n// we always pass state and action as parameters.\r\n// we pass a default parameter of init state\r\nconst rootReducer = (state = initState,action) => {\r\n    const newState = {...state};\r\n    if ( action.type === 'ITEMS_HAS_ERRORED') {      \r\n            newState.hasErrored = action.hasErrored  \r\n    }\r\n    if ( action.type === 'ITEMS_IS_LOADING') { \r\n            newState.isLoading = action.isLoading\r\n    \r\n    }\r\n    if ( action.type === 'ITEMS_FETCH_DATA_SUCCESS'){\r\n            newState.cities = action.cities\r\n        } \r\n        return newState; \r\n    }\r\n   \r\n\r\n\r\n \r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}