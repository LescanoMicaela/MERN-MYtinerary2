{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\src\\\\components\\\\Cities.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../store/actions/actions';\nimport Loader from './Loader';\nimport './cities.css';\n\nvar Cities =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Cities, _React$Component);\n\n  function Cities() {\n    var _this;\n\n    _classCallCheck(this, Cities);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Cities).call(this));\n    _this.state = {\n      input: ''\n    };\n    return _this;\n  }\n\n  _createClass(Cities, [{\n    key: \"onChangeHandler\",\n    value: function onChangeHandler(e) {\n      this.setState({\n        input: e.target.value\n      });\n      console.log(state.input);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchData('/api/cities');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.hasErrored) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, \"Sorry! There was an error loading the items\");\n      }\n\n      if (this.props.isLoading) {\n        return React.createElement(Loader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"contentCities\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(Filter, {\n        classStyle: \"filterDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"citiesList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, this.props.cities.map(function (item) {\n        return React.createElement(Citydiv, {\n          key: item._id,\n          name: item.name,\n          image: item.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return Cities;\n}(React.Component);\n\nvar Citydiv = function Citydiv(props) {\n  return React.createElement(\"div\", {\n    style: {\n      backgroundImage: \"url(\".concat(props.image, \")\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, props.name));\n}; // we take the state and map it to the props of this component\n//with state we get acces to the state of the store\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(state);\n  return {\n    cities: state.cities,\n    hasErrored: state.itemsHasErrored,\n    isLoading: state.itemsIsLoading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchData: function fetchData(url) {\n      return dispatch(actionCreator.fetchCities(url));\n    }\n  };\n};\n\nvar Filter = function Filter(props) {\n  return React.createElement(\"div\", {\n    className: props.classStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"  Filter by city...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }));\n}; //connect is a function that return a higher oder componets and wraps our Cities component.\n// we pass mapstatetoprops to our connect, so when when we connect to redux\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cities);","map":{"version":3,"sources":["C:\\Users\\lesca\\Desktop\\mytinerary\\client\\src\\components\\Cities.js"],"names":["React","connect","actionCreator","Loader","Cities","state","input","e","setState","target","value","console","log","props","fetchData","hasErrored","isLoading","cities","map","item","_id","name","image","Component","Citydiv","backgroundImage","mapStateToProps","itemsHasErrored","itemsIsLoading","mapDispatchToProps","dispatch","url","fetchCities","Filter","classStyle"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as  actionCreator  from '../store/actions/actions';\r\nimport Loader from './Loader';\r\nimport './cities.css'\r\n\r\nclass Cities extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n          input: '',\r\n        }\r\n      }\r\n    \r\n      onChangeHandler(e){\r\n        this.setState({\r\n          input: e.target.value,\r\n        })\r\n        console.log(state.input)\r\n      }\r\n    \r\n    componentDidMount() {\r\n        this.props.fetchData('/api/cities');\r\n    }\r\n    render() {\r\n        \r\n        if (this.props.hasErrored) {\r\n            return <p>Sorry! There was an error loading the items</p>;\r\n        }\r\n        if (this.props.isLoading) {\r\n            return <Loader />;\r\n        }\r\n        return (\r\n            <div className='contentCities'>\r\n                <Filter classStyle='filterDiv' />\r\n                 <div className='citiesList'>\r\n                {this.props.cities.map((item) => (\r\n                    <Citydiv key={item._id}name={item.name} image={item.image} />\r\n                ))}\r\n            </div>\r\n            </div>\r\n           \r\n        );\r\n    }\r\n\r\n  \r\n}\r\n\r\nconst Citydiv = (props) => {\r\n    return (\r\n        <div style={{backgroundImage: `url(${props.image})`}}>\r\n            <h2>{props.name}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\n// we take the state and map it to the props of this component\r\n//with state we get acces to the state of the store\r\nconst mapStateToProps = (state) => {\r\n    console.log(state)\r\n    return {\r\n        cities: state.cities,\r\n        hasErrored: state.itemsHasErrored,\r\n        isLoading: state.itemsIsLoading\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchData: (url) => dispatch(actionCreator.fetchCities(url))\r\n        };\r\n    };\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div className={props.classStyle}>\r\n            <input type='text' placeholder='  Filter by city...'></input>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//connect is a function that return a higher oder componets and wraps our Cities component.\r\n// we pass mapstatetoprops to our connect, so when when we connect to redux\r\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cities);\r\n"]},"metadata":{},"sourceType":"module"}