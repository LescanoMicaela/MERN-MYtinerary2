{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar initState = {\n  cities: [],\n  hasErrored: false,\n  isLoading: false //we create a root reducer, in a big application we would have more than one reduce\n  // we always pass state and action as parameters.\n  // we pass a default parameter of init state\n\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'ITEMS_FETCH_DATA_SUCCESS') {\n    return _objectSpread({}, state, {\n      cities: [].concat(_toConsumableArray(state.cities), _toConsumableArray(action.cities))\n    });\n  }\n\n  if (action.type === 'ITEMS_HAS_ERRORED') {\n    return _objectSpread({}, state, {\n      cities: [].concat(_toConsumableArray(state.hasErrored), _toConsumableArray(action.hasErrored))\n    });\n  }\n\n  if (action.type === 'ITEMS_IS_LOADING') {\n    return _objectSpread({}, state, {\n      cities: [].concat(_toConsumableArray(state.isLoading), _toConsumableArray(action.isLoading))\n    });\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:\\Users\\lesca\\Desktop\\mytinerary\\client\\src\\store\\reducers\\rootReducer.js"],"names":["initState","cities","hasErrored","isLoading","rootReducer","state","action","type"],"mappings":";;AAAA,IAAMA,SAAS,GAAG;AACdC,EAAAA,MAAM,EAAE,EADM;AAEdC,EAAAA,UAAU,EAAE,KAFE;AAGdC,EAAAA,SAAS,EAAG,KAHE,CAMlB;AACA;AACA;;AARkB,CAAlB;;AASA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAA8B;AAAA,MAA7BC,KAA6B,uEAArBL,SAAqB;AAAA,MAAXM,MAAW;;AAC9C,MAAKA,MAAM,CAACC,IAAP,KAAgB,0BAArB,EAAgD;AAC5C,6BACOF,KADP;AAEIJ,MAAAA,MAAM,+BAAOI,KAAK,CAACJ,MAAb,sBAAuBK,MAAM,CAACL,MAA9B;AAFV;AAIH;;AACD,MAAKK,MAAM,CAACC,IAAP,KAAgB,mBAArB,EAA0C;AACtC,6BACOF,KADP;AAEIJ,MAAAA,MAAM,+BAAOI,KAAK,CAACH,UAAb,sBAA2BI,MAAM,CAACJ,UAAlC;AAFV;AAKH;;AACD,MAAKI,MAAM,CAACC,IAAP,KAAgB,kBAArB,EAAyC;AACrC,6BACOF,KADP;AAEIJ,MAAAA,MAAM,+BAAOI,KAAK,CAACF,SAAb,sBAA0BG,MAAM,CAACH,SAAjC;AAFV;AAKH;AAEJ,CAtBD;;AA0BA,eAAeC,WAAf","sourcesContent":["const initState = {\r\n    cities: [],\r\n    hasErrored: false,\r\n    isLoading : false\r\n}\r\n\r\n//we create a root reducer, in a big application we would have more than one reduce\r\n// we always pass state and action as parameters.\r\n// we pass a default parameter of init state\r\nconst rootReducer = (state = initState,action) => {\r\n    if ( action.type === 'ITEMS_FETCH_DATA_SUCCESS'){\r\n        return {\r\n            ...state,\r\n            cities : [...state.cities,...action.cities]\r\n        }  \r\n    }\r\n    if ( action.type === 'ITEMS_HAS_ERRORED') {\r\n        return {\r\n            ...state,\r\n            cities : [...state.hasErrored,...action.hasErrored]\r\n        } \r\n    \r\n    }\r\n    if ( action.type === 'ITEMS_IS_LOADING') {\r\n        return {\r\n            ...state,\r\n            cities : [...state.isLoading,...action.isLoading]\r\n        } \r\n    \r\n    }\r\n   \r\n}\r\n\r\n \r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}