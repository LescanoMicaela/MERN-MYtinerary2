{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\src\\\\components\\\\Itinerary.js\";\nimport React from 'react';\nimport CityButton from './CityButton';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../store/actions/itineraryActions';\nimport Loader from './Loader';\n\nvar Itinerary =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Itinerary, _React$Component);\n\n  function Itinerary() {\n    var _this;\n\n    _classCallCheck(this, Itinerary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Itinerary).call(this));\n    _this.state = {\n      input: ''\n    };\n    return _this;\n  }\n\n  _createClass(Itinerary, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchData(makeUrl);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //Destructuring props to use for conditional rendering\n      var _this$props = this.props,\n          itineraryHasErrored = _this$props.itineraryHasErrored,\n          itineraryIsLoading = _this$props.itineraryIsLoading;\n      console.log(\"holi\", this.props);\n      var filteredCityList = this.props.cities.filter(function (city) {\n        return city.name == {\n          getParameter: getParameter\n        };\n      }).map(function (city) {\n        return React.createElement(CityButton, {\n          key: city._id,\n          name: city.name,\n          image: city.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"contentCities\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, itineraryHasErrored && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"Sorry! There was an error loading the items\"), itineraryIsLoading && React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), !itineraryHasErrored && !itineraryIsLoading && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, filteredCityList));\n    }\n  }]);\n\n  return Itinerary;\n}(React.Component);\n\nvar getParameter = window.location.href.split(\"/itinerary/\")[1];\nvar makeUrl = \"/api/itineraries/\".concat(getParameter); // we take the state and map it to the props of this component\n//with state we get acces to the state of the store\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(state);\n  return {\n    itinerary: state.itinerary,\n    itineraryHasErrored: state.itinerarysHasErrored,\n    itineraryIsLoading: state.itineraryIsLoading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchData: function fetchData(url) {\n      return dispatch(actionCreator.fetchCities(url));\n    }\n  };\n}; //connect is a function that return a higher oder componets and wraps our Cities component.\n// we pass mapstatetoprops to our connect, so when when we connect to redux\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Itinerary);","map":{"version":3,"sources":["C:\\Users\\lesca\\Desktop\\mytinerary\\client\\src\\components\\Itinerary.js"],"names":["React","CityButton","connect","actionCreator","Loader","Itinerary","state","input","props","fetchData","makeUrl","itineraryHasErrored","itineraryIsLoading","console","log","filteredCityList","cities","filter","city","name","getParameter","map","_id","image","Component","window","location","href","split","mapStateToProps","itinerary","itinerarysHasErrored","mapDispatchToProps","dispatch","url","fetchCities"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAMC,aAAb,MAAiC,mCAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAEMC,S;;;;;AACF,uBAAa;AAAA;;AAAA;;AACT;AACA,UAAKC,KAAL,GAAY;AACVC,MAAAA,KAAK,EAAE;AADG,KAAZ;AAFS;AAKV;;;;wCAEgB;AAEf,WAAKC,KAAL,CAAWC,SAAX,CAAqBC,OAArB;AACH;;;6BACO;AACJ;AADI,wBAE4C,KAAKF,KAFjD;AAAA,UAEEG,mBAFF,eAEEA,mBAFF;AAAA,UAEsBC,kBAFtB,eAEsBA,kBAFtB;AAGJC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKN,KAAzB;AACA,UAAIO,gBAAgB,GAAG,KAAKP,KAAL,CAAWQ,MAAX,CACtBC,MADsB,CACf,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAL,IAAa;AAACC,UAAAA,YAAY,EAAZA;AAAD,SAAjB;AAAA,OADW,EAEtBC,GAFsB,CAElB,UAACH,IAAD;AAAA,eAAU,oBAAC,UAAD;AAAY,UAAA,GAAG,EAAEA,IAAI,CAACI,GAAtB;AAA0B,UAAA,IAAI,EAAEJ,IAAI,CAACC,IAArC;AAA2C,UAAA,KAAK,EAAED,IAAI,CAACK,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAV;AAAA,OAFkB,CAAvB;AAIA,aACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCZ,mBAAmB,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDADxB,EAECC,kBAAkB,IAAK,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFxB,EAGA,CAACD,mBAAD,IAAwB,CAACC,kBAAzB,IACD,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKG,gBADL,CAJC,CADJ;AAWH;;;;EA/BmBf,KAAK,CAACwB,S;;AAmC9B,IAAMJ,YAAY,GAAGK,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,aAA3B,EAA0C,CAA1C,CAArB;AACA,IAAIlB,OAAO,8BAAuBU,YAAvB,CAAX,C,CAGA;AACA;;AACA,IAAMS,eAAe,GAAG,SAAlBA,eAAkB,CAACvB,KAAD,EAAW;AAC/BO,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACA,SAAO;AACHwB,IAAAA,SAAS,EAAExB,KAAK,CAACwB,SADd;AAEHnB,IAAAA,mBAAmB,EAAEL,KAAK,CAACyB,oBAFxB;AAGHnB,IAAAA,kBAAkB,EAAEN,KAAK,CAACM;AAHvB,GAAP;AAKH,CAPD;;AASA,IAAMoB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACrC,SAAO;AACHxB,IAAAA,SAAS,EAAE,mBAACyB,GAAD;AAAA,aAASD,QAAQ,CAAC9B,aAAa,CAACgC,WAAd,CAA0BD,GAA1B,CAAD,CAAjB;AAAA;AADR,GAAP;AAGC,CAJL,C,CAOA;AACA;AACA;;;AACA,eAAehC,OAAO,CAAC2B,eAAD,EAAkBG,kBAAlB,CAAP,CAA6C3B,SAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport CityButton from './CityButton';\r\nimport { connect } from 'react-redux';\r\nimport * as  actionCreator  from '../store/actions/itineraryActions';\r\nimport Loader from './Loader';\r\n\r\nclass Itinerary extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n          input: '',\r\n        }\r\n      }\r\n    \r\n    componentDidMount(){\r\n       \r\n        this.props.fetchData(makeUrl);\r\n    }\r\n    render(){\r\n        //Destructuring props to use for conditional rendering\r\n        const{itineraryHasErrored,itineraryIsLoading} = this.props;\r\n        console.log(\"holi\", this.props)\r\n        let filteredCityList = this.props.cities\r\n        .filter(city => city.name == {getParameter})\r\n        .map((city) => <CityButton key={city._id}name={city.name} image={city.image} />);\r\n        \r\n        return(\r\n            <div className='contentCities'>\r\n            {itineraryHasErrored && <p>Sorry! There was an error loading the items</p>}\r\n           { itineraryIsLoading &&  <Loader />}\r\n           {!itineraryHasErrored && !itineraryIsLoading &&\r\n           <React.Fragment>\r\n               {filteredCityList}\r\n           </React.Fragment>\r\n           }\r\n       </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst getParameter = window.location.href.split(\"/itinerary/\")[1];  \r\nlet makeUrl = `/api/itineraries/${getParameter}`;\r\n\r\n\r\n// we take the state and map it to the props of this component\r\n//with state we get acces to the state of the store\r\nconst mapStateToProps = (state) => {\r\n    console.log(state)\r\n    return {\r\n        itinerary: state.itinerary,\r\n        itineraryHasErrored: state.itinerarysHasErrored,\r\n        itineraryIsLoading: state.itineraryIsLoading\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchData: (url) => dispatch(actionCreator.fetchCities(url))\r\n        };\r\n    };\r\n\r\n\r\n//connect is a function that return a higher oder componets and wraps our Cities component.\r\n// we pass mapstatetoprops to our connect, so when when we connect to redux\r\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Itinerary);\r\n"]},"metadata":{},"sourceType":"module"}