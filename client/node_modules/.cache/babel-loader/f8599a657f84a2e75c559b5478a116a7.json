{"ast":null,"code":"import fetch from 'cross-fetch';\n/*export const getCities = (cities) => {return {type: 'GET_CITIES',cities : cities} }*/\n\n{\n  /*\r\n    export const getAllCities= (dispatch) => {\r\n     return fetch('/api/cities')\r\n     .then(response => {\r\n        return response.json();\r\n     })\r\n     .catch(error => {\r\n       console.log(error);\r\n     });\r\n   }\r\n  \r\n   \r\n  export const loadCities= () => {  \r\n     return function(dispatch) {\r\n       return getAllCities().then(cities => {\r\n         dispatch(getCities(cities));\r\n       }).catch(error => {\r\n         throw(error);\r\n       });\r\n     };\r\n   }\r\n  */\n}\nexport function itemsHasErrored(bool) {\n  return {\n    type: 'ITEMS_HAS_ERRORED',\n    hasErrored: bool\n  };\n}\nexport function itemsIsLoading(bool) {\n  return {\n    type: 'ITEMS_IS_LOADING',\n    isLoading: bool\n  };\n}\nexport function itemsFetchDataSuccess(cities) {\n  return {\n    type: 'ITEMS_FETCH_DATA_SUCCESS',\n    cities: cities\n  };\n}\nexport function fetchCities(url) {\n  return function (dispatch) {\n    dispatch(itemsIsLoading(true));\n    fetch(url).then(function (response) {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      dispatch(itemsIsLoading(false));\n      return response;\n    }).then(function (response) {\n      return response.json();\n    }).then(function (items) {\n      return dispatch(itemsFetchDataSuccess(items));\n    }).catch(function () {\n      return dispatch(itemsHasErrored(true));\n    });\n  };\n}","map":{"version":3,"sources":["C:\\Users\\lesca\\Desktop\\mytinerary\\client\\src\\store\\actions\\actions.js"],"names":["fetch","itemsHasErrored","bool","type","hasErrored","itemsIsLoading","isLoading","itemsFetchDataSuccess","cities","fetchCities","url","dispatch","then","response","ok","Error","statusText","json","items","catch"],"mappings":"AACA,OAAOA,KAAP,MAAkB,aAAlB;AAEA;;AAEA;AAAC;;;;;;;;;;;;;;;;;;;;;;AAqBE;AAEH,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,SAAO;AACHC,IAAAA,IAAI,EAAE,mBADH;AAEHC,IAAAA,UAAU,EAAEF;AAFT,GAAP;AAID;AACD,OAAO,SAASG,cAAT,CAAwBH,IAAxB,EAA8B;AACnC,SAAO;AACHC,IAAAA,IAAI,EAAE,kBADH;AAEHG,IAAAA,SAAS,EAAEJ;AAFR,GAAP;AAID;AACD,OAAO,SAASK,qBAAT,CAA+BC,MAA/B,EAAuC;AAC5C,SAAO;AACHL,IAAAA,IAAI,EAAE,0BADH;AAEHK,IAAAA,MAAM,EAANA;AAFG,GAAP;AAID;AAKD,OAAO,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AAC/B,SAAO,UAACC,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAACN,cAAc,CAAC,IAAD,CAAf,CAAR;AACAL,IAAAA,KAAK,CAACU,GAAD,CAAL,CACKE,IADL,CACU,UAACC,QAAD,EAAc;AAChB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,cAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACH;;AACDL,MAAAA,QAAQ,CAACN,cAAc,CAAC,KAAD,CAAf,CAAR;AACA,aAAOQ,QAAP;AACH,KAPL,EAQKD,IARL,CAQU,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACI,IAAT,EAAd;AAAA,KARV,EASKL,IATL,CASU,UAACM,KAAD;AAAA,aAAWP,QAAQ,CAACJ,qBAAqB,CAACW,KAAD,CAAtB,CAAnB;AAAA,KATV,EAUKC,KAVL,CAUW;AAAA,aAAMR,QAAQ,CAACV,eAAe,CAAC,IAAD,CAAhB,CAAd;AAAA,KAVX;AAWH,GAbD;AAcD","sourcesContent":["\r\nimport fetch from 'cross-fetch'\r\n\r\n/*export const getCities = (cities) => {return {type: 'GET_CITIES',cities : cities} }*/\r\n\r\n{/*\r\n   export const getAllCities= (dispatch) => {\r\n    return fetch('/api/cities')\r\n    .then(response => {\r\n       return response.json();\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n \r\n  \r\n export const loadCities= () => {  \r\n    return function(dispatch) {\r\n      return getAllCities().then(cities => {\r\n        dispatch(getCities(cities));\r\n      }).catch(error => {\r\n        throw(error);\r\n      });\r\n    };\r\n  }\r\n*/}\r\n\r\nexport function itemsHasErrored(bool) {\r\n  return {\r\n      type: 'ITEMS_HAS_ERRORED',\r\n      hasErrored: bool\r\n  };\r\n}\r\nexport function itemsIsLoading(bool) {\r\n  return {\r\n      type: 'ITEMS_IS_LOADING',\r\n      isLoading: bool\r\n  };\r\n}\r\nexport function itemsFetchDataSuccess(cities) {\r\n  return {\r\n      type: 'ITEMS_FETCH_DATA_SUCCESS',\r\n      cities\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\nexport function fetchCities(url) {\r\n  return (dispatch) => {\r\n      dispatch(itemsIsLoading(true));\r\n      fetch(url)\r\n          .then((response) => {\r\n              if (!response.ok) {\r\n                  throw Error(response.statusText);\r\n              }\r\n              dispatch(itemsIsLoading(false));\r\n              return response;\r\n          })\r\n          .then((response) => response.json())\r\n          .then((items) => dispatch(itemsFetchDataSuccess(items)))\r\n          .catch(() => dispatch(itemsHasErrored(true)));\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}