{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\src\\\\components\\\\Itinerary.js\";\nimport React from 'react';\nimport CityButton from './CityButton';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../store/actions/itineraryActions';\nimport Loader from './Loader';\n\nvar Itinerary =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Itinerary, _React$Component);\n\n  function Itinerary() {\n    _classCallCheck(this, Itinerary);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Itinerary).apply(this, arguments));\n  }\n\n  _createClass(Itinerary, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var getParameter = window.location.href.split(\"/itineraries/\")[1];\n      var makeUrl = \"api/itineraries/\".concat(getParameter);\n      this.props.fetchData(makeUrl);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, \"hi\");\n    }\n  }]);\n\n  return Itinerary;\n}(React.Component); // we take the state and map it to the props of this component\n//with state we get acces to the state of the store\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(state);\n  return {\n    cities: state.cities,\n    hasErrored: state.itemsHasErrored,\n    isLoading: state.itemsIsLoading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchData: function fetchData(url) {\n      return dispatch(actionCreator.fetchCities(url));\n    }\n  };\n}; //connect is a function that return a higher oder componets and wraps our Cities component.\n// we pass mapstatetoprops to our connect, so when when we connect to redux\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Itinerary);","map":{"version":3,"sources":["C:\\Users\\lesca\\Desktop\\mytinerary\\client\\src\\components\\Itinerary.js"],"names":["React","CityButton","connect","actionCreator","Loader","Itinerary","getParameter","window","location","href","split","makeUrl","props","fetchData","Component","mapStateToProps","state","console","log","cities","hasErrored","itemsHasErrored","isLoading","itemsIsLoading","mapDispatchToProps","dispatch","url","fetchCities"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAMC,aAAb,MAAiC,mCAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAEMC,S;;;;;;;;;;;;;wCACiB;AACf,UAAMC,YAAY,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,eAA3B,EAA4C,CAA5C,CAArB;AACA,UAAIC,OAAO,6BAAsBL,YAAtB,CAAX;AACA,WAAKM,KAAL,CAAWC,SAAX,CAAqBF,OAArB;AACH;;;6BACO;AACJ,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAGH;;;;EAVmBX,KAAK,CAACc,S,GAiB9B;AACA;;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAO;AACHG,IAAAA,MAAM,EAAEH,KAAK,CAACG,MADX;AAEHC,IAAAA,UAAU,EAAEJ,KAAK,CAACK,eAFf;AAGHC,IAAAA,SAAS,EAAEN,KAAK,CAACO;AAHd,GAAP;AAKH,CAPD;;AASA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACrC,SAAO;AACHZ,IAAAA,SAAS,EAAE,mBAACa,GAAD;AAAA,aAASD,QAAQ,CAACtB,aAAa,CAACwB,WAAd,CAA0BD,GAA1B,CAAD,CAAjB;AAAA;AADR,GAAP;AAGC,CAJL,C,CAOA;AACA;AACA;;;AACA,eAAexB,OAAO,CAACa,eAAD,EAAkBS,kBAAlB,CAAP,CAA6CnB,SAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport CityButton from './CityButton';\r\nimport { connect } from 'react-redux';\r\nimport * as  actionCreator  from '../store/actions/itineraryActions';\r\nimport Loader from './Loader';\r\n\r\nclass Itinerary extends React.Component{\r\n    componentDidMount(){\r\n        const getParameter = window.location.href.split(\"/itineraries/\")[1];    \r\n        let makeUrl = `api/itineraries/${getParameter}`;\r\n        this.props.fetchData(makeUrl);\r\n    }\r\n    render(){\r\n        return(\r\n          <h1>hi</h1>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// we take the state and map it to the props of this component\r\n//with state we get acces to the state of the store\r\nconst mapStateToProps = (state) => {\r\n    console.log(state)\r\n    return {\r\n        cities: state.cities,\r\n        hasErrored: state.itemsHasErrored,\r\n        isLoading: state.itemsIsLoading\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchData: (url) => dispatch(actionCreator.fetchCities(url))\r\n        };\r\n    };\r\n\r\n\r\n//connect is a function that return a higher oder componets and wraps our Cities component.\r\n// we pass mapstatetoprops to our connect, so when when we connect to redux\r\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Itinerary);\r\n"]},"metadata":{},"sourceType":"module"}