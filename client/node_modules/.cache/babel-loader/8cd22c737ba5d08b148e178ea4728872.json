{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\src\\\\components\\\\Cities.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../store/actions/actions';\nimport Loader from './Loader';\nimport './cities.css';\nimport { DebounceInput } from 'react-debounce-input';\nimport CityButton from './CityButton';\n\nvar Cities =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Cities, _React$Component);\n\n  function Cities() {\n    var _this;\n\n    _classCallCheck(this, Cities);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Cities).call(this));\n    _this.state = {\n      input: ''\n    };\n    return _this;\n  }\n\n  _createClass(Cities, [{\n    key: \"onChangeHandler\",\n    value: function onChangeHandler(e) {\n      this.setState({\n        input: e.target.value.toLowerCase()\n      });\n      console.log(this.state.input);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchData('/api/cities');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //Destructuring props to use for conditional rendering\n      var _this$props = this.props,\n          hasErrored = _this$props.hasErrored,\n          isLoading = _this$props.isLoading; //Filter cities by input here\n\n      var filteredCityList = this.props.cities.filter(function (city) {\n        return _this2.state.input === '' || city['name'].toLowerCase().includes(_this2.state.input);\n      }).map(function (city) {\n        return React.createElement(CityButton, {\n          key: city._id,\n          name: city.name,\n          image: city.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"contentCities\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, hasErrored && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Sorry! There was an error loading the items\"), isLoading && React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), !hasErrored && !isLoading && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(Filter, {\n        classStyle: \"filterDiv\",\n        onChangeHandler: this.onChangeHandler.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), filteredCityList.length > 0 && React.createElement(\"div\", {\n        className: \"citiesList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, filteredCityList), filteredCityList.length == 0 && React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"No results found\")));\n    }\n  }]);\n\n  return Cities;\n}(React.Component);\n\nvar Citydiv = function Citydiv(props) {\n  return React.createElement(\"div\", {\n    style: {\n      backgroundImage: \"url(\".concat(props.image, \")\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, props.name));\n}; // we take the state and map it to the props of this component\n//with state we get acces to the state of the store\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(state);\n  return {\n    cities: state.cities,\n    hasErrored: state.itemsHasErrored,\n    isLoading: state.itemsIsLoading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchData: function fetchData(url) {\n      return dispatch(actionCreator.fetchCities(url));\n    }\n  };\n};\n\nvar Filter = function Filter(props) {\n  return React.createElement(\"div\", {\n    className: props.classStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(DebounceInput, {\n    minLength: 1,\n    debounceTimeout: 300,\n    onChange: props.onChangeHandler,\n    type: \"text\",\n    placeholder: \"  Filter by city...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }));\n}; //connect is a function that return a higher oder componets and wraps our Cities component.\n// we pass mapstatetoprops to our connect, so when when we connect to redux\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cities);","map":{"version":3,"sources":["C:\\Users\\lesca\\Desktop\\mytinerary\\client\\src\\components\\Cities.js"],"names":["React","connect","actionCreator","Loader","DebounceInput","CityButton","Cities","state","input","e","setState","target","value","toLowerCase","console","log","props","fetchData","hasErrored","isLoading","filteredCityList","cities","filter","city","includes","map","_id","name","image","onChangeHandler","bind","length","Component","Citydiv","backgroundImage","mapStateToProps","itemsHasErrored","itemsIsLoading","mapDispatchToProps","dispatch","url","fetchCities","Filter","classStyle"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as  actionCreator  from '../store/actions/actions';\r\nimport Loader from './Loader';\r\nimport './cities.css';\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport CityButton from './CityButton';\r\n\r\nclass Cities extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n          input: '',\r\n        }\r\n      }\r\n    \r\n      onChangeHandler(e){\r\n            this.setState({\r\n            input: e.target.value.toLowerCase(),\r\n        })\r\n            console.log(this.state.input)\r\n      }\r\n    \r\n    componentDidMount() {\r\n        this.props.fetchData('/api/cities');\r\n    }\r\n    \r\n    render() {\r\n        //Destructuring props to use for conditional rendering\r\n        const{hasErrored,isLoading} = this.props;\r\n\r\n        //Filter cities by input here\r\n        let filteredCityList = this.props.cities\r\n            .filter(city => this.state.input === '' || city['name'].toLowerCase().includes(this.state.input))\r\n            .map((city) => <CityButton key={city._id}name={city.name} image={city.image} />);\r\n            \r\n            return(\r\n                <div className='contentCities'>\r\n                     {hasErrored && <p>Sorry! There was an error loading the items</p>}\r\n                    { isLoading &&  <Loader />}\r\n                    {!hasErrored && !isLoading &&\r\n                    <React.Fragment>\r\n                        <Filter classStyle='filterDiv' onChangeHandler={this.onChangeHandler.bind(this)}/>\r\n                         { filteredCityList.length > 0 &&\r\n                        <div className='citiesList'>\r\n                            {filteredCityList}\r\n                        </div> }\r\n                        { filteredCityList.length == 0 &&\r\n                        <h2>No results found</h2>\r\n                        }\r\n                    </React.Fragment>\r\n                    }\r\n                </div>\r\n            )\r\n    }           \r\n}\r\n\r\nconst Citydiv = (props) => {\r\n    return (\r\n        <div style={{backgroundImage: `url(${props.image})`}}>\r\n            <h2>{props.name}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\n// we take the state and map it to the props of this component\r\n//with state we get acces to the state of the store\r\nconst mapStateToProps = (state) => {\r\n    console.log(state)\r\n    return {\r\n        cities: state.cities,\r\n        hasErrored: state.itemsHasErrored,\r\n        isLoading: state.itemsIsLoading\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchData: (url) => dispatch(actionCreator.fetchCities(url))\r\n        };\r\n    };\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div className={props.classStyle}>\r\n             <DebounceInput\r\n                minLength={1}\r\n                debounceTimeout={300}  \r\n                onChange={props.onChangeHandler} type='text' placeholder='  Filter by city...' />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//connect is a function that return a higher oder componets and wraps our Cities component.\r\n// we pass mapstatetoprops to our connect, so when when we connect to redux\r\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cities);\r\n"]},"metadata":{},"sourceType":"module"}