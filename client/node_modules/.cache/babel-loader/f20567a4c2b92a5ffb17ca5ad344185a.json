{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\src\\\\components\\\\Itinerary.js\";\nimport React from 'react';\nimport CityButton from './CityButton';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../store/actions/itineraryActions';\nimport Loader from './Loader';\n\nvar Itinerary =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Itinerary, _React$Component);\n\n  function Itinerary() {\n    var _this;\n\n    _classCallCheck(this, Itinerary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Itinerary).call(this));\n    _this.state = {\n      input: ''\n    };\n    return _this;\n  }\n\n  _createClass(Itinerary, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var getParameter = window.location.href.split(\"/itinerary/\")[1];\n      var makeUrl = \"/api/itineraries/\".concat(getParameter);\n      this.props.fetchData(makeUrl);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //Destructuring props to use for conditional rendering\n      var _this$props = this.props,\n          hasErrored = _this$props.hasErrored,\n          isLoading = _this$props.isLoading;\n      console.log(\"holi\", this.props);\n      var city = this.props.cities[0];\n      return React.createElement(\"div\", {\n        className: \"contentCities\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, hasErrored && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Sorry! There was an error loading the items\"), isLoading && React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }), !hasErrored && !isLoading && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(CityButton, {\n        name: city[0].ref.name,\n        image: city.image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Itinerary;\n}(React.Component); // we take the state and map it to the props of this component\n//with state we get acces to the state of the store\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(state);\n  return {\n    cities: state.cities,\n    hasErrored: state.itemsHasErrored,\n    isLoading: state.itemsIsLoading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchData: function fetchData(url) {\n      return dispatch(actionCreator.fetchCities(url));\n    }\n  };\n}; //connect is a function that return a higher oder componets and wraps our Cities component.\n// we pass mapstatetoprops to our connect, so when when we connect to redux\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Itinerary);","map":{"version":3,"sources":["C:\\Users\\lesca\\Desktop\\mytinerary\\client\\src\\components\\Itinerary.js"],"names":["React","CityButton","connect","actionCreator","Loader","Itinerary","state","input","getParameter","window","location","href","split","makeUrl","props","fetchData","hasErrored","isLoading","console","log","city","cities","ref","name","image","Component","mapStateToProps","itemsHasErrored","itemsIsLoading","mapDispatchToProps","dispatch","url","fetchCities"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAMC,aAAb,MAAiC,mCAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAEMC,S;;;;;AACF,uBAAa;AAAA;;AAAA;;AACT;AACA,UAAKC,KAAL,GAAY;AACVC,MAAAA,KAAK,EAAE;AADG,KAAZ;AAFS;AAKV;;;;wCAEgB;AACf,UAAMC,YAAY,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,aAA3B,EAA0C,CAA1C,CAArB;AACA,UAAIC,OAAO,8BAAuBL,YAAvB,CAAX;AACA,WAAKM,KAAL,CAAWC,SAAX,CAAqBF,OAArB;AACH;;;6BACO;AACJ;AADI,wBAE0B,KAAKC,KAF/B;AAAA,UAEEE,UAFF,eAEEA,UAFF;AAAA,UAEaC,SAFb,eAEaA,SAFb;AAGJC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKL,KAAzB;AACA,UAAIM,IAAI,GAAG,KAAKN,KAAL,CAAWO,MAAX,CAAkB,CAAlB,CAAX;AACA,aACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCL,UAAU,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDADf,EAECC,SAAS,IAAK,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFf,EAGA,CAACD,UAAD,IAAe,CAACC,SAAhB,IACD,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAEG,IAAI,CAAC,CAAD,CAAJ,CAAQE,GAAR,CAAYC,IAA9B;AAAoC,QAAA,KAAK,EAAEH,IAAI,CAACI,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAJC,CADJ;AAWH;;;;EA7BmBxB,KAAK,CAACyB,S,GAoC9B;AACA;;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACpB,KAAD,EAAW;AAC/BY,EAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AACA,SAAO;AACHe,IAAAA,MAAM,EAAEf,KAAK,CAACe,MADX;AAEHL,IAAAA,UAAU,EAAEV,KAAK,CAACqB,eAFf;AAGHV,IAAAA,SAAS,EAAEX,KAAK,CAACsB;AAHd,GAAP;AAKH,CAPD;;AASA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACrC,SAAO;AACHf,IAAAA,SAAS,EAAE,mBAACgB,GAAD;AAAA,aAASD,QAAQ,CAAC3B,aAAa,CAAC6B,WAAd,CAA0BD,GAA1B,CAAD,CAAjB;AAAA;AADR,GAAP;AAGC,CAJL,C,CAOA;AACA;AACA;;;AACA,eAAe7B,OAAO,CAACwB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CxB,SAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport CityButton from './CityButton';\r\nimport { connect } from 'react-redux';\r\nimport * as  actionCreator  from '../store/actions/itineraryActions';\r\nimport Loader from './Loader';\r\n\r\nclass Itinerary extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n          input: '',\r\n        }\r\n      }\r\n    \r\n    componentDidMount(){\r\n        const getParameter = window.location.href.split(\"/itinerary/\")[1];  \r\n        let makeUrl = `/api/itineraries/${getParameter}`;\r\n        this.props.fetchData(makeUrl);\r\n    }\r\n    render(){\r\n        //Destructuring props to use for conditional rendering\r\n        const{hasErrored,isLoading} = this.props;\r\n        console.log(\"holi\", this.props)\r\n        let city = this.props.cities[0]\r\n        return(\r\n            <div className='contentCities'>\r\n            {hasErrored && <p>Sorry! There was an error loading the items</p>}\r\n           { isLoading &&  <Loader />}\r\n           {!hasErrored && !isLoading &&\r\n           <React.Fragment>\r\n               <CityButton name={city[0].ref.name} image={city.image} />\r\n           </React.Fragment>\r\n           }\r\n       </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// we take the state and map it to the props of this component\r\n//with state we get acces to the state of the store\r\nconst mapStateToProps = (state) => {\r\n    console.log(state)\r\n    return {\r\n        cities: state.cities,\r\n        hasErrored: state.itemsHasErrored,\r\n        isLoading: state.itemsIsLoading\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchData: (url) => dispatch(actionCreator.fetchCities(url))\r\n        };\r\n    };\r\n\r\n\r\n//connect is a function that return a higher oder componets and wraps our Cities component.\r\n// we pass mapstatetoprops to our connect, so when when we connect to redux\r\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Itinerary);\r\n"]},"metadata":{},"sourceType":"module"}