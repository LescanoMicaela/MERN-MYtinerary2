{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\src\\\\components\\\\Cities.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../store/actions/actions';\n\nvar Cities =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Cities, _React$Component);\n\n  function Cities() {\n    _classCallCheck(this, Cities);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Cities).apply(this, arguments));\n  }\n\n  _createClass(Cities, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchData('/api/cities');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.hasErrored) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, \"Sorry! There was an error loading the items\");\n      }\n\n      if (this.props.isLoading) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, \"Loading\\u2026\");\n      }\n\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, this.props.cities.map(function (item) {\n        return React.createElement(\"li\", {\n          key: item._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, item.name);\n      }));\n    }\n  }]);\n\n  return Cities;\n}(React.Component); // we take the state and map it to the props of this component\n//with state we get acces to the state of the store\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(state);\n  return {\n    cities: state.cities,\n    hasErrored: state.itemsHasErrored,\n    isLoading: state.itemsIsLoading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchData: function fetchData(url) {\n      return dispatch(actionCreator.fetchCities(url));\n    }\n  };\n}; //connect is a function that return a higher oder componets and wraps our Cities component.\n// we pass mapstatetoprops to our connect, so when when we connect to redux\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cities);","map":{"version":3,"sources":["C:\\Users\\lesca\\Desktop\\mytinerary\\client\\src\\components\\Cities.js"],"names":["React","Component","connect","actionCreator","Cities","props","fetchData","hasErrored","isLoading","cities","map","item","_id","name","mapStateToProps","state","console","log","itemsHasErrored","itemsIsLoading","mapDispatchToProps","dispatch","url","fetchCities"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAMC,aAAb,MAAiC,0BAAjC;;IAGMC,M;;;;;;;;;;;;;wCACkB;AAChB,WAAKC,KAAL,CAAWC,SAAX,CAAqB,aAArB;AACH;;;6BACQ;AACL,UAAI,KAAKD,KAAL,CAAWE,UAAf,EAA2B;AACvB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAAP;AACH;;AACD,UAAI,KAAKF,KAAL,CAAWG,SAAf,EAA0B;AACtB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAP;AACH;;AACD,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKH,KAAL,CAAWI,MAAX,CAAkBC,GAAlB,CAAsB,UAACC,IAAD;AAAA,eACnB;AAAI,UAAA,GAAG,EAAEA,IAAI,CAACC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKD,IAAI,CAACE,IADV,CADmB;AAAA,OAAtB,CADL,CADJ;AASH;;;;EApBgBb,KAAK,CAACC,S,GAyB3B;AACA;;;AACA,IAAMa,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAO;AACHN,IAAAA,MAAM,EAAEM,KAAK,CAACN,MADX;AAEHF,IAAAA,UAAU,EAAEQ,KAAK,CAACG,eAFf;AAGHV,IAAAA,SAAS,EAAEO,KAAK,CAACI;AAHd,GAAP;AAKH,CAPD;;AASA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACrC,SAAO;AACHf,IAAAA,SAAS,EAAE,mBAACgB,GAAD;AAAA,aAASD,QAAQ,CAAClB,aAAa,CAACoB,WAAd,CAA0BD,GAA1B,CAAD,CAAjB;AAAA;AADR,GAAP;AAGC,CAJL,C,CASA;AACA;AACA;;;AACA,eAAepB,OAAO,CAACY,eAAD,EAAkBM,kBAAlB,CAAP,CAA6ChB,MAA7C,CAAf","sourcesContent":["import React,{Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as  actionCreator  from '../store/actions/actions';\r\n\r\n\r\nclass Cities extends React.Component{\r\n    componentDidMount() {\r\n        this.props.fetchData('/api/cities');\r\n    }\r\n    render() {\r\n        if (this.props.hasErrored) {\r\n            return <p>Sorry! There was an error loading the items</p>;\r\n        }\r\n        if (this.props.isLoading) {\r\n            return <p>Loadingâ€¦</p>;\r\n        }\r\n        return (\r\n            <ul>\r\n                {this.props.cities.map((item) => (\r\n                    <li key={item._id}>\r\n                        {item.name}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n  \r\n}\r\n\r\n// we take the state and map it to the props of this component\r\n//with state we get acces to the state of the store\r\nconst mapStateToProps = (state) => {\r\n    console.log(state)\r\n    return {\r\n        cities: state.cities,\r\n        hasErrored: state.itemsHasErrored,\r\n        isLoading: state.itemsIsLoading\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchData: (url) => dispatch(actionCreator.fetchCities(url))\r\n        };\r\n    };\r\n\r\n\r\n\r\n\r\n//connect is a function that return a higher oder componets and wraps our Cities component.\r\n// we pass mapstatetoprops to our connect, so when when we connect to redux\r\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cities);\r\n"]},"metadata":{},"sourceType":"module"}