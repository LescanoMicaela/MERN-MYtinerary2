{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\node_modules\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\lesca\\\\Desktop\\\\mytinerary\\\\client\\\\src\\\\components\\\\Cities.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../store/actions/actions';\n\nvar Cities =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Cities, _React$Component);\n\n  function Cities() {\n    _classCallCheck(this, Cities);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Cities).apply(this, arguments));\n  }\n\n  _createClass(Cities, [{\n    key: \"render\",\n    value: function render() {\n      console.log(this.props);\n      var cities = this.props.cities;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, \"This is the cities page\"));\n    }\n  }]);\n\n  return Cities;\n}(React.Component); // we take the state and map it to the props of this component\n//with sttae we get acces to the state of the store\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cities: state.cities\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchData: function fetchData() {\n      return dispatch(actionCreator.getAllCities());\n    }\n  };\n}; //connect is a function that return a higher oder componets and wraps our Cities component.\n// we pass mapstatetoprops to our connect, so when when we connect to redux\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\n\n\nexport default connect(mapStateToProps)(Cities);","map":{"version":3,"sources":["C:\\Users\\lesca\\Desktop\\mytinerary\\client\\src\\components\\Cities.js"],"names":["React","Component","connect","actionCreator","Cities","console","log","props","cities","mapStateToProps","state","mapDispatchToProps","dispatch","fetchData","getAllCities"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAMC,aAAb,MAAiC,0BAAjC;;IAGMC,M;;;;;;;;;;;;;6BACM;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AADI,UAEGC,MAFH,GAEa,KAAKD,KAFlB,CAEGC,MAFH;AAGJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADJ,CADJ;AAKH;;;;EATgBR,KAAK,CAACC,S,GAY3B;AACA;;;AACA,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAC/B,SAAM;AACFF,IAAAA,MAAM,EAAGE,KAAK,CAACF;AADb,GAAN;AAGH,CAJD;;AAMA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACrC,SAAM;AACFC,IAAAA,SAAS,EAAG;AAAA,aAAMD,QAAQ,CAACT,aAAa,CAACW,YAAd,EAAD,CAAd;AAAA;AADV,GAAN;AAIH,CALD,C,CAQA;AACA;AACA;;;AACA,eAAeZ,OAAO,CAACO,eAAD,CAAP,CAAyBL,MAAzB,CAAf","sourcesContent":["import React,{Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as  actionCreator  from '../store/actions/actions';\r\n\r\n\r\nclass Cities extends React.Component{\r\n    render(){\r\n        console.log(this.props);\r\n        const {cities} = this.props;\r\n        return(\r\n            <div>\r\n                <h1>This is the cities page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// we take the state and map it to the props of this component\r\n//with sttae we get acces to the state of the store\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        cities : state.cities\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        fetchData : () => dispatch(actionCreator.getAllCities())\r\n\r\n    }\r\n}\r\n\r\n\r\n//connect is a function that return a higher oder componets and wraps our Cities component.\r\n// we pass mapstatetoprops to our connect, so when when we connect to redux\r\n//knows what data we want to grab from redux and the prop we wnat to create to apply this data to it\r\nexport default connect(mapStateToProps)(Cities);"]},"metadata":{},"sourceType":"module"}